# app/main.py
from __future__ import annotations

import os
import sys
import tempfile
from pathlib import Path

import pandas as pd
import streamlit as st

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
ROOT = Path(__file__).resolve().parents[1]
if str(ROOT) not in sys.path:
    sys.path.insert(0, str(ROOT))

from core.pipeline.runner import run_pipeline  # noqa: E402

APP_TITLE = "CSV Normalizer ‚Äî MVP"


def read_columns_head(path: str, delimiter: str, encoding: str) -> list[str]:
    if not path or not Path(path).exists():
        return []
    encodings_to_try = [encoding] if encoding != "auto" else ["utf-8", "cp1251", "latin1"]
    for enc in encodings_to_try:
        try:
            df = pd.read_csv(path, sep=delimiter, nrows=0, dtype=str, keep_default_na=False, encoding=enc)
            return list(df.columns)
        except Exception:
            continue
    return []


def page_header():
    st.title(APP_TITLE)
    st.caption("–í—ã–±–æ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ CSV ‚Üí –∫–æ–Ω—Ñ–∏–≥ –ø—Ä–∞–≤–∏–ª ‚Üí –∑–∞–ø—É—Å–∫ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ ‚Üí –ª–æ–≥")


def sidebar_inputs():
    st.sidebar.header("–§–∞–π–ª—ã")

    mode = st.sidebar.radio("–ò—Å—Ç–æ—á–Ω–∏–∫ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞", ["–õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å", "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"], index=0)

    input_path = None
    uploaded_tmp = None

    if mode == "–õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å":
        input_path = st.sidebar.text_input("–ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É CSV", value="")
    else:
        up = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV", type=["csv"])
        if up is not None:
            tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".csv")
            tmp.write(up.getbuffer())
            tmp.flush()
            tmp.close()
            uploaded_tmp = tmp.name
            input_path = uploaded_tmp

    output_path = st.sidebar.text_input("–ü—É—Ç—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ CSV", value="")
    log_path = st.sidebar.text_input("–ü—É—Ç—å –¥–ª—è –ª–æ–≥–∞ (.txt)", value="")

    st.sidebar.divider()
    st.sidebar.header("–ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–∞–≤–∏–ª")
    profile = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ YAML-–ø—Ä–æ—Ñ–∏–ª—å",
        options=[
            "configs/profiles/minimal_email.yaml",
        ],
        index=0,
    )

    st.sidebar.divider()
    delimiter = st.sidebar.text_input("–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å", value=",")
    encoding = st.sidebar.selectbox("–ö–æ–¥–∏—Ä–æ–≤–∫–∞", options=["auto", "utf-8", "cp1251", "latin1"], index=0)
    chunksize = st.sidebar.number_input(
        "–†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞", min_value=10_000, max_value=2_000_000, step=50_000, value=100_000
    )

    # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è
    st.sidebar.divider()
    st.sidebar.header("–î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è")
    columns = read_columns_head(input_path, delimiter, encoding)
    dedup_enabled = st.sidebar.checkbox("–í–∫–ª—é—á–∏—Ç—å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é", value=False)
    dedup_field = st.sidebar.selectbox(
        "–ü–æ–ª–µ –¥–ª—è –¥–µ–¥—É–ø–∞",
        options=columns if columns else ["(–∫–æ–ª–æ–Ω–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã)"],
        disabled=not (dedup_enabled and columns),
        index=0,
    )
    dedup_subset = [dedup_field] if (dedup_enabled and columns) else []

    return input_path, output_path, log_path, profile, delimiter, encoding, chunksize, uploaded_tmp, dedup_enabled, dedup_subset


def show_preview(input_path: str, delimiter: str, encoding: str):
    st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    if not input_path or not Path(input_path).exists():
        st.info("–£–∫–∞–∂–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤—Ö–æ–¥–Ω–æ–π CSV, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä.")
        return

    try_order = [encoding] if encoding != "auto" else ["utf-8", "cp1251", "latin1"]
    df = None
    err = None
    for enc in try_order:
        try:
            df = pd.read_csv(
                input_path,
                sep=delimiter,
                nrows=200,
                dtype=str,
                keep_default_na=False,
                encoding=enc,
            )
            break
        except Exception as e:
            err = e
            continue

    if df is None:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å CSV: {err}")
        return

    st.write(f"–°—Ç—Ä–æ–∫ –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ: {len(df)}  ‚Ä¢  –ö–æ–ª–æ–Ω–æ–∫: {len(df.columns)}")
    st.dataframe(df)


def run_button(input_path, output_path, log_path, profile, delimiter, encoding, chunksize, dedup_enabled, dedup_subset):
    st.subheader("–ó–∞–ø—É—Å–∫")
    can_run = all([input_path, output_path, log_path, profile])
    run = st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é", disabled=not can_run, type="primary")
    if not can_run:
        st.caption("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏ –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∞–≤–∏–ª.")

    if run:
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞‚Ä¶ —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è –Ω–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–∞—Ö"):
            run_pipeline(
                input_csv=input_path,
                output_csv=output_path,
                config_yaml=profile,
                log_txt=log_path,
                chunksize=int(chunksize),
                delimiter_override=delimiter,
                encoding_override=encoding,
                dedup_enabled=dedup_enabled,
                dedup_subset=dedup_subset,
            )
        st.success("–ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ª–æ–≥ –∑–∞–ø–∏—Å–∞–Ω—ã.")

        # –ö–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        st.subheader("–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        try:
            if Path(output_path).exists():
                with open(output_path, "rb") as fh:
                    st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å CSV", data=fh.read(), file_name=Path(output_path).name, mime="text/csv")
        except Exception as e:
            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å CSV –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")

        try:
            if Path(log_path).exists():
                with open(log_path, "rb") as fh:
                    st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –ª–æ–≥ (.txt)", data=fh.read(), file_name=Path(log_path).name, mime="text/plain")
        except Exception as e:
            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ª–æ–≥ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")

        # –ü–æ–∫–∞–∑–∞—Ç—å —Ö–≤–æ—Å—Ç –ª–æ–≥–∞
        try:
            with open(log_path, "r", encoding="utf-8") as fh:
                text = fh.read()
            st.subheader("–õ–æ–≥ (—Ñ—Ä–∞–≥–º–µ–Ω—Ç)")
            st.text(text[-8000:])
        except Exception as e:
            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥: {e}")


def main():
    page_header()
    (
        input_path,
        output_path,
        log_path,
        profile,
        delimiter,
        encoding,
        chunksize,
        uploaded_tmp,
        dedup_enabled,
        dedup_subset,
    ) = sidebar_inputs()
    show_preview(input_path, delimiter, encoding)
    run_button(
        input_path,
        output_path,
        log_path,
        profile,
        delimiter,
        encoding,
        chunksize,
        dedup_enabled,
        dedup_subset,
    )

    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –±—ã–ª)
    if uploaded_tmp and Path(uploaded_tmp).exists():
        try:
            os.remove(uploaded_tmp)
        except Exception:
            pass


if __name__ == "__main__":
    main()
