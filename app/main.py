# app/main.py
from __future__ import annotations

import os
import sys
import tempfile
from pathlib import Path

import pandas as pd
import streamlit as st

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –∏–º–ø–æ—Ä—Ç—ã –≤–∏–¥–∞ "from core...."
ROOT = Path(__file__).resolve().parents[1]
if str(ROOT) not in sys.path:
    sys.path.insert(0, str(ROOT))

from core.pipeline.runner import run_pipeline  # noqa: E402  (–ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏ ROOT –≤ sys.path)

APP_TITLE = "CSV Normalizer ‚Äî MVP"


def page_header():
    st.title(APP_TITLE)
    st.caption("–í—ã–±–æ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ CSV ‚Üí –∫–æ–Ω—Ñ–∏–≥ –ø—Ä–∞–≤–∏–ª ‚Üí –∑–∞–ø—É—Å–∫ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ ‚Üí –ª–æ–≥")


def sidebar_inputs():
    st.sidebar.header("–§–∞–π–ª—ã")

    mode = st.sidebar.radio(
        "–ò—Å—Ç–æ—á–Ω–∏–∫ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞", ["–õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å", "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"], index=0
    )

    input_path = None
    uploaded_tmp = None

    if mode == "–õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å":
        input_path = st.sidebar.text_input("–ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É CSV", value="")
    else:
        up = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV", type=["csv"])
        if up is not None:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π
            tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".csv")
            tmp.write(up.getbuffer())
            tmp.flush()
            tmp.close()
            uploaded_tmp = tmp.name
            input_path = uploaded_tmp

    output_path = st.sidebar.text_input("–ü—É—Ç—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ CSV", value="")
    log_path = st.sidebar.text_input("–ü—É—Ç—å –¥–ª—è –ª–æ–≥–∞ (.txt)", value="")

    st.sidebar.divider()
    st.sidebar.header("–ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–∞–≤–∏–ª")
    profile = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ YAML-–ø—Ä–æ—Ñ–∏–ª—å",
        options=[
            "configs/profiles/minimal_email.yaml",
            # —Å—é–¥–∞ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–∑–∂–µ
        ],
        index=0,
    )

    st.sidebar.divider()
    delimiter = st.sidebar.text_input("–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ,)", value=",")
    chunksize = st.sidebar.number_input(
        "–†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞", min_value=10_000, max_value=2_000_000, step=50_000, value=100_000
    )

    return input_path, output_path, log_path, profile, delimiter, chunksize, uploaded_tmp


def show_preview(input_path: str, delimiter: str):
    st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    if not input_path or not Path(input_path).exists():
        st.info("–£–∫–∞–∂–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤—Ö–æ–¥–Ω–æ–π CSV, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä.")
        return

    try:
        df = pd.read_csv(
            input_path,
            sep=delimiter,
            nrows=200,
            dtype=str,
            keep_default_na=False,
            encoding="utf-8",
        )
    except UnicodeDecodeError:
        try:
            df = pd.read_csv(
                input_path,
                sep=delimiter,
                nrows=200,
                dtype=str,
                keep_default_na=False,
                encoding="cp1251",
            )
        except Exception as e:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å CSV (cp1251): {e}")
            return
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å CSV: {e}")
        return

    st.write(f"–°—Ç—Ä–æ–∫ –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ: {len(df)}  ‚Ä¢  –ö–æ–ª–æ–Ω–æ–∫: {len(df.columns)}")
    st.dataframe(df)


def run_button(input_path, output_path, log_path, profile, delimiter, chunksize):
    st.subheader("–ó–∞–ø—É—Å–∫")
    can_run = all([input_path, output_path, log_path, profile])
    run = st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é", disabled=not can_run, type="primary")
    if not can_run:
        st.caption("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏ –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∞–≤–∏–ª.")

    if run:
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞‚Ä¶ —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è –Ω–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–∞—Ö"):
            # –°–µ–π—á–∞—Å delimiter –±–µ—Ä—ë—Ç—Å—è –∏–∑ YAML (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ',').
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∂—ë—Å—Ç–∫–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∏–∑ UI ‚Äî –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º –≤ runner –ø–∞—Ä–∞–º–µ—Ç—Ä.
            run_pipeline(
                input_csv=input_path,
                output_csv=output_path,
                config_yaml=profile,
                log_txt=log_path,
                chunksize=int(chunksize),
            )
        st.success("–ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ª–æ–≥ –∑–∞–ø–∏—Å–∞–Ω—ã.")

        # –ü–æ–∫–∞–∑–∞—Ç—å —Ö–≤–æ—Å—Ç –ª–æ–≥–∞
        try:
            with open(log_path, "r", encoding="utf-8") as fh:
                text = fh.read()
            st.subheader("–õ–æ–≥ (—Ñ—Ä–∞–≥–º–µ–Ω—Ç)")
            st.text(text[-8000:])  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ ~8–∫ —Å–∏–º–≤–æ–ª–æ–≤
        except Exception as e:
            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥: {e}")


def main():
    page_header()
    input_path, output_path, log_path, profile, delimiter, chunksize, uploaded_tmp = sidebar_inputs()
    show_preview(input_path, delimiter)
    run_button(input_path, output_path, log_path, profile, delimiter, chunksize)

    # –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª (–µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–º)
    if uploaded_tmp and Path(uploaded_tmp).exists():
        try:
            os.remove(uploaded_tmp)
        except Exception:
            pass


if __name__ == "__main__":
    main()
